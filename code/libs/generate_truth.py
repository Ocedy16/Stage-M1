import numpy as np
import torch

def count_induced_paths(adj_matrix, path_length):
    n = adj_matrix.shape[0]
    counts = np.zeros((n, n), dtype=int)

    def dfs(current_node, start_node, depth, visited, path):
        if depth == path_length:
            if current_node != start_node:
                # Check for no extra edges between non-consecutive nodes
                for i in range(len(path)):
                    for j in range(i+2, len(path)):
                        if adj_matrix[path[i], path[j]] == 1:
                            return  # Not induced
                counts[start_node][current_node] += 1
            return
        
        for neighbor in range(n):
            if adj_matrix[current_node][neighbor] == 1 and neighbor not in visited:
                visited.add(neighbor)
                dfs(neighbor, start_node, depth + 1, visited, path + [neighbor])
                visited.remove(neighbor)

    for i in range(n):
        dfs(i, i, 0, set([i]), [i])

    # Because graph is undirected, symmetrize the matrix
    counts = (counts + counts.T) // 2

    return counts
A12 = torch.tensor([[0,1,0,0,0,0,0,0,0,0,0],
                            [1,0,1,0,0,1,0,0,0,0,0],
                            [0,1,0,1,0,1,1,0,0,0,0],
                            [0,0,1,0,1,0,0,0,0,0,0],
                            [0,0,0,1,0,0,0,0,0,0,0],
                            [0,1,1,0,0,0,1,1,1,0,0],
                            [0,0,1,0,0,1,0,1,0,0,0],
                            [0,0,0,0,0,1,1,0,1,1,0],
                            [0,0,0,0,0,1,0,1,0,0,0],
                            [0,0,0,0,0,0,0,1,0,0,1],
                            [0,0,0,0,0,0,0,0,0,1,0]])*1.

A11 = torch.tensor([[0,0,0,0,1,1,0,0,1,0],
                [0,0,0,0,1,0,0,0,0,0],
                [0,0,0,1,0,0,1,1,0,0],
                [0,0,1,0,0,0,1,1,0,0],
                [1,1,0,0,0,0,0,0,1,0],
                [1,0,0,0,0,0,0,0,1,0],
                [0,0,1,1,0,0,0,1,1,1],
                [0,0,1,1,0,0,1,0,0,1],
                [1,0,0,0,1,1,1,0,0,1],
                [0,0,0,0,0,0,1,1,1,0]])*1.

A = torch.tensor([
    [0,1,1,1,1],
    [1,0,1,0,0],
    [1,1,0,1,0],
    [1,0,1,0,1],
    [1,0,0,1,0]
])*1.

A2 = torch.tensor([[0, 1, 1, 0, 1, 1, 0, 0],
                    [1, 0, 0, 1, 1, 0, 0, 1],
                    [1, 0, 0, 1, 1, 1, 0, 1],
                    [0, 1, 1, 0, 0, 1, 1, 0],
                    [1, 1, 1, 0, 0, 0, 1, 0],
                    [1, 0, 1, 1, 0, 0, 1, 0],
                    [0, 0, 0, 1, 1, 1, 0, 1],
                    [0, 1, 1, 0, 0, 0, 1, 0]])*1.


A13 = torch.tensor([
    [0, 0, 0, 0, 0, 1, 1, 0, 1, 0],  
    [0, 0, 0, 0, 0, 1, 0, 1, 1, 0],  
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 1],  
    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],  
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],  
    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0],  
    [1, 0, 1, 1, 1, 0, 0, 0, 0, 0],  
    [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],  
    [1, 1, 0, 0, 1, 0, 0, 0, 0, 0],  
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  
])*1.

A14 = torch.tensor([
    [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],  
    [0, 0, 0, 1, 1, 0, 1, 0, 0, 0],  
    [1, 0, 0, 0, 1, 0, 0, 1, 0, 0],  
    [1, 1, 0, 0, 0, 0, 0, 1, 1, 0],  
    [0, 1, 1, 0, 0, 0, 0, 0, 1, 1],  
    [1, 0, 0, 0, 0, 0, 1, 1, 0, 0],  
    [0, 1, 0, 0, 0, 1, 0, 0, 0, 1],  
    [0, 0, 1, 1, 0, 1, 0, 0, 1, 0],  
    [0, 0, 0, 1, 1, 0, 0, 1, 0, 1],  
    [0, 0, 0, 0, 1, 0, 1, 0, 1, 0],  
])*1.

A15 = torch.tensor([
    [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # 0
    [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],  # 1
    [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],  # 2
    [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],  # 3
    [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0],  # 4
    [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],  # 5
    [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],  # 6
    [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0],  # 7
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],  # 8
    [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],  # 11
])*1.

print(repr(count_induced_paths(A15, 6)))